'let the user create custom reports (see screenshot in the same directory)

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'UserForm: customReport

'--- PUBLIC
'Public Sub setUp()

'--- PRIVATE EVENTS
'CheckBox#_ EVENT ()
'compValue#_ EVENT ()
'dateRangeDisclaimer_ EVENT ()
'Field#_ EVENT ()
'sortByList_Activate_ EVENT ()
'formatListBox_ EVENT ()
'Qualifier#_ EVENT ()
'runCustomReportButton_Click

'--- PRIVATE HELPER FUNCTIONS
'Private Sub fieldParse(ByVal fieldData As Variant, ByVal qualData As Variant, ByVal valData As Variant, _
                        ByRef c As Variant, ByRef v As Variant, ByRef q As Variant, _
                        ByRef runIt As Boolean, ByRef reportTitle As String, ByRef mo16 As Boolean)
'Private Function isFieldDate(field As String) As Boolean
'Private Function isFieldDbl(field As String) As Boolean
'Private Function isFieldInt(field As String) As Boolean
'Private Function getFields() As Variant
'Private Function getSortByList() As Variant
'Private Function getQualList() As Variant

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'--- OPTIONS
Option Explicit
Option Base 1


'----------------------------------------------------
'--- PUBLIC
'----------------------------------------------------

Public Sub setUp()
    customReport.Caption = "Custom Report"
    sortByList_Activate
    formatListBox_Activate
    Field1_Activate
    Field2_Activate
    Field3_Activate
    Field4_Activate
    Qualifier1_Activate
    Qualifier2_Activate
    Qualifier3_Activate
    Qualifier4_Activate
    compValue1_Activate
    compValue2_Activate
    compValue3_Activate
    compValue4_Activate
    dateRangeDisclaimer_Activate
End Sub


'----------------------------------------------------
'--- PRIVATE
'----------------------------------------------------

''''' CheckBox#_ EVENT () ''''''''''''''''''''
Private Sub CheckBox1_Click()
    If CheckBox1.value = True Then
        compValue1.Visible = False
    Else
        compValue1.Visible = True
        compValue1.value = ""
    End If
End Sub
Private Sub CheckBox2_Click()
    If CheckBox2.value = True Then
        compValue2.Visible = False
    Else
        compValue2.Visible = True
        compValue2.value = ""
    End If
End Sub
Private Sub CheckBox3_Click()
    If CheckBox3.value = True Then
        compValue3.Visible = False
    Else
        compValue3.Visible = True
        compValue3.value = ""
    End If
End Sub
Private Sub CheckBox4_Click()
    If CheckBox4.value = True Then
        compValue4.Visible = False
    Else
        compValue4.Visible = True
        compValue4.value = ""
    End If
End Sub

''''' compValue#_ EVENT () ''''''''''''''''''''
Private Sub compValue1_Activate()
    With compValue1
        Dim field As Variant
        Dim fields As Variant: fields = getFields()
        For Each field In fields
            .AddItem (field)
        Next
    End With
End Sub
Private Sub compValue2_Activate()
    With compValue2
        Dim field As Variant
        Dim fields As Variant: fields = getFields()
        For Each field In fields
            .AddItem (field)
        Next
    End With
End Sub
Private Sub compValue3_Activate()
    With compValue3
        Dim field As Variant
        Dim fields As Variant: fields = getFields()
        For Each field In fields
            .AddItem (field)
        Next
    End With
End Sub
Private Sub compValue4_Activate()
    With compValue4
        Dim field As Variant
        Dim fields As Variant: fields = getFields()
        For Each field In fields
            .AddItem (field)
        Next
    End With
End Sub

''''' dateRangeDisclaimer_ EVENT () ''''''''''''''''''''
Private Sub dateRangeDisclaimer_Activate()
    Dim msg As String: msg = ""
    msg = msg & "WARNINGS:" & vbNewLine
    msg = msg & "*POs ordered before OrderDate 1/1/22 will most likely be missing." & vbNewLine
    msg = msg & vbNewLine
    msg = msg & "*Reports only go back " & GET_ORDERS_DEFAULT_MONTHS & " months by OrderDate, unless an OrderDate Range is specified by a Field(s)." & vbNewLine
    dateRangeDisclaimer.Caption = msg
End Sub

''''' Field#_ EVENT () ''''''''''''''''''''
Private Sub Field1_Activate()
    With Field1
        Dim field As Variant
        Dim fields As Variant: fields = getFields()
        For Each field In fields
            .AddItem (field)
        Next
    End With
End Sub
Private Sub Field2_Activate()
    With Field2
        Dim field As Variant
        Dim fields As Variant: fields = getFields()
        For Each field In fields
            .AddItem (field)
        Next
    End With
End Sub
Private Sub Field3_Activate()
    With Field3
        Dim field As Variant
        Dim fields As Variant: fields = getFields()
        For Each field In fields
            .AddItem (field)
        Next
    End With
End Sub
Private Sub Field4_Activate()
    With Field4
        Dim field As Variant
        Dim fields As Variant: fields = getFields()
        For Each field In fields
            .AddItem (field)
        Next
    End With
End Sub

Private Sub Field1_Change()
    If isFieldDate(Field1.Text) = True Then
        CheckBox1.Visible = False
    Else
        CheckBox1.Visible = True
        CheckBox1.value = False
    End If
End Sub
Private Sub Field2_Change()
    If isFieldDate(Field2.Text) = True Then
        CheckBox2.Visible = False
    Else
        CheckBox2.Visible = True
        CheckBox2.value = False
    End If
End Sub
Private Sub Field3_Change()
    If isFieldDate(Field3.Text) = True Then
        CheckBox3.Visible = False
    Else
        CheckBox3.Visible = True
        CheckBox3.value = False
    End If
End Sub
Private Sub Field4_Change()
    If isFieldDate(Field4.Text) = True Then
        CheckBox4.Visible = False
    Else
        CheckBox4.Visible = True
        CheckBox4.value = False
    End If
End Sub

''''' sortByList_Activate_ EVENT () ''''''''''''''''''''
Private Sub sortByList_Activate() '
    With sortByList
        Dim field As Variant
        Dim sortByListFields As Variant: sortByListFields = getSortByList()
        For Each field In sortByListFields
            .AddItem (field)
        Next
        '.value = "nothing"
    End With
End Sub

''''' formatListBox_Activate_ EVENT () ''''''''''''''''''''
Private Sub formatListBox_Activate() '
    With FormatListBox
        Dim field As Variant
        Dim formatListFields As Variant: formatListFields = getFormatList()
        For Each field In formatListFields
            .AddItem (field)
        Next
        '.value = "normal paste"
    End With
End Sub

Private Sub formatListBox_Change()
    If FormatListBox.value = "normal paste" Then
        sortByList_Activate
        sortByList.Visible = True
    Else
        sortByList.Visible = False
        sortByList.Clear
    End If
End Sub

''''' Qualifier#_ EVENT () ''''''''''''''''''''
Private Sub Qualifier1_Activate()
    With Qualifier1
        Dim field As Variant
        Dim qualList As Variant: qualList = getQualList()
        For Each field In qualList
            .AddItem (field)
        Next
    End With
End Sub
Private Sub Qualifier2_Activate()
    With Qualifier2
        Dim field As Variant
        Dim qualList As Variant: qualList = getQualList()
        For Each field In qualList
            .AddItem (field)
        Next
    End With
End Sub
Private Sub Qualifier3_Activate()
    With Qualifier3
        Dim field As Variant
        Dim qualList As Variant: qualList = getQualList()
        For Each field In qualList
            .AddItem (field)
        Next
    End With
End Sub
Private Sub Qualifier4_Activate()
    With Qualifier4
        Dim field As Variant
        Dim qualList As Variant: qualList = getQualList()
        For Each field In qualList
            .AddItem (field)
        Next
    End With
End Sub


''''' runCustomReportButton_Click ''''''''''''''''''''
Private Sub runCustomReportButton_Click()

    On Error GoTo Exception

    Dim field1Data As String: field1Data = Field1.Text
    Dim field2Data As String: field2Data = Field2.Text
    Dim field3Data As String: field3Data = Field3.Text
    Dim field4Data As String: field4Data = Field4.Text

    Dim qual1Data As String: qual1Data = Qualifier1.Text
    Dim qual2Data As String: qual2Data = Qualifier2.Text
    Dim qual3Data As String: qual3Data = Qualifier3.Text
    Dim qual4Data As String: qual4Data = Qualifier4.Text
    
    Dim val1IsList As Boolean: val1IsList = CheckBox1.value
    Dim val2IsList As Boolean: val2IsList = CheckBox2.value
    Dim val3IsList As Boolean: val3IsList = CheckBox3.value
    Dim val4IsList As Boolean: val4IsList = CheckBox4.value
    
    Dim val1Data As String: val1Data = Value1.Text
    Dim val2Data As String: val2Data = Value2.Text
    Dim val3Data As String: val3Data = Value3.Text
    Dim val4Data As String: val4Data = Value4.Text

    Dim compValue1Data As String: compValue1Data = compValue1.Text
    Dim compValue2Data As String: compValue2Data = compValue2.Text
    Dim compValue3Data As String: compValue3Data = compValue3.Text
    Dim compValue4Data As String: compValue4Data = compValue4.Text
    
    If val1Data = "" And compValue1Data <> "" Then
        val1Data = "/REGEX/" & compValue1Data
    End If
    If val2Data = "" And compValue2Data <> "" Then
        val2Data = "/REGEX/" & compValue2Data
    End If
    If val3Data = "" And compValue3Data <> "" Then
        val3Data = "/REGEX/" & compValue3Data
    End If
    If val4Data = "" And compValue4Data <> "" Then
        val4Data = "/REGEX/" & compValue4Data
    End If

    Dim reportTitle As String: reportTitle = ""
    
    Dim c As Variant 'Fields
    Dim v As Variant 'Values
    Dim q As Variant 'Qualifiers
    
    Dim runIt As Boolean: runIt = False
    
    Dim strC As String
    Dim strQ As String
    Dim strV As String
    
    Dim mo16 As Boolean: mo16 = True
    
    'FIELDS
    Call fieldParse(field1Data, qual1Data, val1Data, c, v, q, runIt, reportTitle, mo16)
    Call fieldParse(field2Data, qual2Data, val2Data, c, v, q, runIt, reportTitle, mo16)
    Call fieldParse(field3Data, qual3Data, val3Data, c, v, q, runIt, reportTitle, mo16)
    Call fieldParse(field4Data, qual4Data, val4Data, c, v, q, runIt, reportTitle, mo16)

    If runIt = True Then

        Dim archive As archive: Set archive = New archive: Call archive.constructor

        Dim orders As Variant
        
        Dim z As Integer: z = LBound(c)
        
        'check if explicitly state orderDate, if not, then let archive.getOrders(...) use GET_ORDERS_DEFAULT_MONTHS
        Dim startDate As Date: startDate = CDate(0)
        Dim endDate As Date: endDate = CDate(0)

        While z <= UBound(c)
        
            If c(z) = COLRE_ORDER_DATE Then
            
                'If iterations > 1 Then
                    'irrelevant, would never come up practically
                'Else
                    If q(z) = ">" Or q(z) = ">=" Then
                        startDate = CDate(v(z))
                    ElseIf q(z) = "<" Or q(z) = "<=" Then
                        endDate = CDate(v(z))
                    ElseIf q(z) = "=" Then
                        startDate = CDate(v(z))
                        endDate = CDate(v(z))
                    End If
                'End If
            End If
            
            z = z + 1
        Wend

        Dim getItemData As Boolean: getItemData = True
        orders = archive.getOrders(c, v, q, startDate, endDate, getItemData:=getItemData)

        If isVariantArrayInit(orders) = False Then
            Call prompt_alert("No results found. Report creation canceled.", "Custom Report Canceled")
            End
        End If

        'copy sheet and paste values
        Dim SortBy As String: SortBy = sortByList.Text
        reportTitle = reportTitle & "SORTED BY: " & SortBy
        
        If SortBy = COLRE_SKU Then
            Call sortOrders(orders, COLRE_BEST_SHIP_DATE, "asc")
            Call sortOrders(orders, COLRE_ORDER_DATE, "desc")
            Call sortOrders(orders, COLRE_SKU, "asc")
        ElseIf SortBy = COLRE_ORDER_DATE Then
            Call sortOrders(orders, COLRE_BEST_SHIP_DATE, "asc")
            Call sortOrders(orders, COLRE_SKU, "desc")
            Call sortOrders(orders, COLRE_ORDER_DATE, "asc")
        ElseIf SortBy <> "nothing" Then
            Call sortOrders(orders, COLRE_BEST_SHIP_DATE, "desc")
            Call sortOrders(orders, COLRE_SKU, "asc")
            Call sortOrders(orders, COLRE_ORDER_DATE, "desc")
            Call sortOrders(orders, SortBy, "asc")
        End If
        
        If mo16 = True Then reportTitle = "CRITERIA: Last " & GET_ORDERS_DEFAULT_MONTHS & " Months by orderDate " & vbNewLine & reportTitle
        Dim Report As Reports: Set Report = New Reports
        Dim customSheetName As String: customSheetName = ""
        
        If FormatListBox.Text = "preset_openOrdersByDate" Then
            customSheetName = "CUSTOM " & FormatListBox.Text
            Call Report.openOrders_byDate(orders, name:=customSheetName)
            Call setValue(customSheetName, reportTitle, 1, 5)
            
        ElseIf FormatListBox.Text = "preset_openOrdersBySKU" Then
            customSheetName = "CUSTOM " & FormatListBox.Text
            Call Report.openOrders_bySku(orders, name:=customSheetName)
            Call setValue(customSheetName, reportTitle, 1, 5)
            
        ElseIf FormatListBox.Text = "preset_todaysOrders" Then
            customSheetName = "CUSTOM " & FormatListBox.Text
            Call Report.todaysOrders(orders, name:=customSheetName)
            Call setValue(customSheetName, reportTitle, 1, 5)
            
        ElseIf FormatListBox.Text = "preset_backOrders" Then
            customSheetName = "CUSTOM " & FormatListBox.Text
            Call Report.backOrders(orders, name:=customSheetName)
            Call setValue(customSheetName, reportTitle, 1, 5)
            
        ElseIf FormatListBox.Text = "preset_late" Then
            customSheetName = "CUSTOM " & FormatListBox.Text
            Call Report.late(orders, name:=customSheetName)
            Call setValue(customSheetName, reportTitle, 2, 5)
            
        ElseIf FormatListBox.Text = "preset_totals" Then
            customSheetName = "CUSTOM " & FormatListBox.Text
            Call Report.totals(orders, name:=customSheetName)
            Call setValue(customSheetName, reportTitle, 1, 3)
            
        Else
            If wsExists(WS_NAME_CUSTOM_REPORT) = True Then deleteSheet (WS_NAME_CUSTOM_REPORT)
            Dim wsName As String: wsName = copySheet(WS_NAME_CUSTOM_REPORT_TEMPLATE, WS_NAME_CUSTOM_REPORT, WS_NAME_HIDDEN_DIVIDER_REPORT)
            Call pasteOrders(WS_NAME_CUSTOM_REPORT, orders, WS_CUSTOM_REPORT_ROW_FIRST, WS_CUSTOM_REPORT_ROW_HEADER)
            Call setValue(WS_NAME_CUSTOM_REPORT, reportTitle, WS_CUSTOM_REPORT_ROW_FRAME, 5)
            
        End If
        
    Else
        Call prompt_alert("Invalid Entry. Report creation canceled.", "Custom Report Canceled")
        End
    End If

    End
    
Exception:
    Call prompt_alert("Error. Report creation canceled.", "Custom Report Canceled")
    End
End Sub


'----------------------------------------------------
'--- PRIVATE HELPER FUNCTIONS
'----------------------------------------------------

Private Sub fieldParse(ByVal fieldData As Variant, ByVal qualData As Variant, ByVal valData As Variant, _
                       ByRef c As Variant, ByRef v As Variant, ByRef q As Variant, _
                       ByRef runIt As Boolean, ByRef reportTitle As String, ByRef mo16 As Boolean)
                       
    Dim strC As String: strC = fieldData
    Dim strQ As String: strQ = qualData
    Dim strV As String: strV = valData

    Dim iterations As Integer: iterations = 1
    
    If strC <> "" And strQ <> "" Then

        Call variantPush(c, strC)

        If Left(strV, 7) = "/REGEX/" Then
        
            Call variantPush(v, strV)
            
        Else
        
            If CheckBox1.value = True Then
                Dim listV As Variant
                listV = SplitBase1(strV, ",", True)
                iterations = UBound(listV)
            End If
            
            Dim i As Integer: i = 1
            While i <= iterations
            
                Dim currentValue As String
                If iterations > 1 Then
                    currentValue = listV(i)
                Else
                    currentValue = strV
                End If
                
                Dim tempV As Variant
                Dim tempQ As Variant
                
                If isFieldDate(strC) = True Then

                    If iterations > 1 Then
                        Call variantPush(tempV, CDate(listV(i)))
                        Call variantPush(tempQ, strQ)
                    Else
                        Call variantPush(v, CDate(strV))
                    End If
 
                ElseIf isFieldDbl(strC) = True Then

                    If iterations > 1 Then
                        Call variantPush(tempV, CDbl(listV(i)))
                        Call variantPush(tempQ, strQ)
                    Else
                        Call variantPush(v, CDbl(strV))
                    End If
                    
                ElseIf isFieldInt(strC) = True Then

                    If iterations > 1 Then
                        Call variantPush(tempV, CInt(listV(i)))
                        Call variantPush(tempQ, strQ)
                    Else
                        Call variantPush(v, CInt(strV))
                    End If
                    
                Else
                
                    If iterations > 1 Then
                        Call variantPush(tempV, listV(i))
                        Call variantPush(tempQ, strQ)
                    Else
                        Call variantPush(v, strV)
                    End If
                    
                End If
                
                i = i + 1
            Wend
            
            If iterations > 1 Then
                Call variantPush(v, tempV)
                Call variantPush(q, tempQ)
            Else
                Call variantPush(q, strQ)
            End If
            
        End If

        If iterations > 1 Then
             reportTitle = reportTitle & "CRITERIA: " & strC & " " & convert_1dArr_Str(tempQ) & " " & convert_1dArr_Str(tempV) & endl(1)
        Else
             reportTitle = reportTitle & "CRITERIA: " & strC & " " & strQ & " " & strV & endl(1)
        End If
       
        If strC = COLRE_ORDER_DATE Then mo16 = False
        runIt = True
    End If
    
End Sub

Private Function isFieldDate(field As String) As Boolean

    If field = COLRE_ACTUAL_SHIP_DATE Or _
       field = COLRE_BEST_SHIP_DATE Or _
       field = COLRE_EXPECTED_DATE Or _
       field = COLRE_ORDER_DATE Or _
       field = COLRE_SCHED_SHIP_DATE Or _
       field = COLRE_WINDOW_START Or _
       field = COLRE_WINDOW_END Then
       
        isFieldDate = True
        
    Else
    
        isFieldDate = False
        
    End If
    
End Function

Private Function isFieldDbl(field As String) As Boolean

    If field = COLRE_UNIT_COST Or _
       field = COLRE_TOTAL_COST Then
       
        isFieldDbl = True
        
    Else
    
        isFieldDbl = False
        
    End If
    
End Function

Private Function isFieldInt(field As String) As Boolean

    If field = COLRE_UNITS_PER_CARTON Or _
       field = COLRE_CARTONS Or _
       field = COLRE_EXPECTED_QUANT Or _
       field = COLRE_PALLETS Or _
       field = COLRE_SHIPMENT_PALLETS Or _
       field = COLRE_QUANTITY_REQUESTED Then
       
        isFieldInt = True
        
    Else
    
        isFieldInt = False
        
    End If
    
End Function

Private Function getFields() As Variant
    Dim fields As Variant
    Call variantPush(fields, COLRE_STATUS)
    Call variantPush(fields, COLRE_ARN)
    Call variantPush(fields, COLRE_PO)
    Call variantPush(fields, COLRE_SKU)
    Call variantPush(fields, COLRE_ORDER_DATE)
    Call variantPush(fields, COLRE_BEST_SHIP_DATE)
    Call variantPush(fields, COLRE_SCHED_SHIP_DATE)
    Call variantPush(fields, COLRE_ACTUAL_SHIP_DATE)
    Call variantPush(fields, COLRE_SCAC)
    Call variantPush(fields, COLRE_CARRIER)
    Call variantPush(fields, COLRE_WINDOW_START)
    Call variantPush(fields, COLRE_WINDOW_END)
    Call variantPush(fields, COLRE_INVOICE_SUBMITTED)
    Call variantPush(fields, COLRE_ORDER_TYPE)
    Call variantPush(fields, COLRE_SHIPMENT_REF_ID)
    Call variantPush(fields, COLRE_INVOICE_ID)
    Call variantPush(fields, COLRE_ASIN)
    Call variantPush(fields, COLRE_VENDOR)
    Call variantPush(fields, COLRE_SHIP_FROM_WAREHOUSE)
    Call variantPush(fields, COLRE_SHIPTOLOC)
    Call variantPush(fields, COLRE_SHIP_TO_COUNTRY)
    Call variantPush(fields, COLRE_UNIT_COST)
    Call variantPush(fields, COLRE_TOTAL_COST)
    Call variantPush(fields, COLRE_UNITS_PER_CARTON)
    Call variantPush(fields, COLRE_CARTONS)
    Call variantPush(fields, COLRE_EXPECTED_QUANT)
    Call variantPush(fields, COLRE_PALLETS)
    Call variantPush(fields, COLRE_SHIPMENT_PALLETS)
    Call variantPush(fields, COLRE_BO_CAUSE)
    Call variantPush(fields, COLRE_BO_CORRECTIVE_ACTION)
    Call variantPush(fields, COLRE_OWNER)
    getFields = fields
End Function

Private Function getSortByList() As Variant
    Dim sortByList As Variant
    Call variantPush(sortByList, "nothing")
    Call variantPush(sortByList, COLRE_STATUS)
    Call variantPush(sortByList, COLRE_ARN)
    Call variantPush(sortByList, COLRE_PO)
    Call variantPush(sortByList, COLRE_SKU)
    Call variantPush(sortByList, COLRE_ORDER_DATE)
    Call variantPush(sortByList, COLRE_BEST_SHIP_DATE)
    Call variantPush(sortByList, COLRE_SCHED_SHIP_DATE)
    Call variantPush(sortByList, COLRE_ACTUAL_SHIP_DATE)
    Call variantPush(sortByList, COLRE_SCAC)
    Call variantPush(sortByList, COLRE_CARRIER)
    Call variantPush(sortByList, COLRE_INVOICE_SUBMITTED)
    Call variantPush(sortByList, COLRE_ORDER_TYPE)
    Call variantPush(sortByList, COLRE_ASIN)
    Call variantPush(sortByList, COLRE_VENDOR)
    Call variantPush(sortByList, COLRE_SHIP_FROM_WAREHOUSE)
    Call variantPush(sortByList, COLRE_SHIPTOLOC)
    Call variantPush(sortByList, COLRE_SHIP_TO_COUNTRY)
    Call variantPush(sortByList, COLRE_UNIT_COST)
    Call variantPush(sortByList, COLRE_TOTAL_COST)
    Call variantPush(sortByList, COLRE_UNITS_PER_CARTON)
    Call variantPush(sortByList, COLRE_CARTONS)
    Call variantPush(sortByList, COLRE_EXPECTED_QUANT)
    Call variantPush(sortByList, COLRE_PALLETS)
    Call variantPush(sortByList, COLRE_SHIPMENT_PALLETS)
    Call variantPush(sortByList, COLRE_BO_CAUSE)
    getSortByList = sortByList
End Function

Private Function getFormatList() As Variant
    Dim formatList As Variant
    Call variantPush(formatList, "normal paste")
    Call variantPush(formatList, "preset_openOrdersByDate")
    Call variantPush(formatList, "preset_openOrdersBySKU")
    Call variantPush(formatList, "preset_todaysOrders")
    Call variantPush(formatList, "preset_backOrders")
    Call variantPush(formatList, "preset_late")
    Call variantPush(formatList, "preset_totals")
    getFormatList = formatList
End Function


Private Function getQualList() As Variant
    Dim qualList As Variant
    Call variantPush(qualList, "=")
    Call variantPush(qualList, "<>")
    Call variantPush(qualList, ">")
    Call variantPush(qualList, "<")
    Call variantPush(qualList, ">=")
    Call variantPush(qualList, "<=")
    Call variantPush(qualList, "Left")
    Call variantPush(qualList, "Right")
    getQualList = qualList
End Function


