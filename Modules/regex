'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Module: regex

'--- CHECK
'Function regexIsMatch(regexPattern As String, str As Variant) As Boolean

'--- MATCH
'Function regexMatch(regexPattern As String, str As Variant) As Variant
'Function regexMatchMultiple(regexPattern As String, str As Variant) As Variant

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'--- OPTIONS
Option Explicit
Option Base 1


'----------------------------------------------------
'--- CHECK
'----------------------------------------------------
Function regexIsMatch(regexPattern As String, str As Variant) As Boolean

    Dim regex As Object: Set regex = New RegExp
    Dim globalFlag As Boolean:     globalFlag = False
    Dim ignoreCaseFlag As Boolean: ignoreCaseFlag = False
    Dim multiLineFlag As Boolean:  multiLineFlag = False
    
    Dim flags As Integer: flags = 0
    
     If (Left(regexPattern, 1) = "/") Then
    
        Dim c As Integer: c = 0
        While c < Len(regexPattern) And _
              Right(Left(regexPattern, Len(regexPattern) - c), 1) <> "/"
            
            Dim char As String: char = Right(Left(regexPattern, Len(regexPattern) - c), 1)

            If char = "g" Then globalFlag = True
            If char = "i" Then ignoreCaseFlag = True
            If char = "m" Then multiLineFlag = True
            
            flags = flags + 1
            c = c + 1
        Wend
    End If

    regexPattern = Right(regexPattern, Len(regexPattern) - 1)
    regexPattern = Left(regexPattern, Len(regexPattern) - (1 + flags))

    If globalFlag = True Then regex.Global = True
    If ignoreCaseFlag = True Then regex.ignoreCase = True
    If multiLineFlag = True Then regex.multiLine = True

    Dim matches As Object
    Dim match As Object
    Dim matchStr As Variant
    
    regex.Pattern = regexPattern
    Set matches = regex.execute(str)
    Dim matchFound As Boolean: matchFound = False
    
    For Each match In matches:
        matchFound = True
    Next
   
    regexIsMatch = matchFound
End Function


'----------------------------------------------------
'--- MATCH
'----------------------------------------------------
Function regexMatch(regexPattern As String, str As Variant) As Variant

    Dim regex As Object: Set regex = New RegExp
    Dim globalFlag As Boolean:     globalFlag = False
    Dim ignoreCaseFlag As Boolean: ignoreCaseFlag = False
    Dim multiLineFlag As Boolean:  multiLineFlag = False
    
    Dim flags As Integer: flags = 0
    
     If (Left(regexPattern, 1) = "/") Then
    
        Dim c As Integer: c = 0
        While c < Len(regexPattern) And _
              Right(Left(regexPattern, Len(regexPattern) - c), 1) <> "/"
            
            Dim char As String: char = Right(Left(regexPattern, Len(regexPattern) - c), 1)

            If char = "g" Then globalFlag = True
            If char = "i" Then ignoreCaseFlag = True
            If char = "m" Then multiLineFlag = True
            
            flags = flags + 1
            c = c + 1
        Wend
    End If

    regexPattern = Right(regexPattern, Len(regexPattern) - 1)
    regexPattern = Left(regexPattern, Len(regexPattern) - (1 + flags))

    If globalFlag = True Then regex.Global = True
    If ignoreCaseFlag = True Then regex.ignoreCase = True
    If multiLineFlag = True Then regex.multiLine = True

    Dim matches As Object
    Dim match As Object
    Dim matchStr As Variant
    
    regex.Pattern = regexPattern
    Set matches = regex.execute(str)
    
    For Each match In matches
        matchStr = match.value
    Next
   
    regexMatch = matchStr
End Function

Function regexMatchMultiple(regexPattern As String, str As Variant) As Variant

    Dim regex As Object: Set regex = New RegExp
    Dim globalFlag As Boolean:     globalFlag = False
    Dim ignoreCaseFlag As Boolean: ignoreCaseFlag = False
    Dim multiLineFlag As Boolean:  multiLineFlag = False
    
    Dim flags As Integer: flags = 0
    
     If (Left(regexPattern, 1) = "/") Then
    
        Dim c As Integer: c = 0
        While c < Len(regexPattern) And _
              Right(Left(regexPattern, Len(regexPattern) - c), 1) <> "/"
            
            Dim char As String: char = Right(Left(regexPattern, Len(regexPattern) - c), 1)

            If char = "g" Then globalFlag = True
            If char = "i" Then ignoreCaseFlag = True
            If char = "m" Then multiLineFlag = True
            
            flags = flags + 1
            c = c + 1
        Wend
    End If

    regexPattern = Right(regexPattern, Len(regexPattern) - 1)
    regexPattern = Left(regexPattern, Len(regexPattern) - (1 + flags))

    If globalFlag = True Then regex.Global = True
    If ignoreCaseFlag = True Then regex.ignoreCase = True
    If multiLineFlag = True Then regex.multiLine = True

    Dim matches As Object
    Dim match As Object
    Dim matchStr As Variant
    
    regex.Pattern = regexPattern
    Set matches = regex.execute(str)
    Dim matchExists As Boolean: matchExists = False
  
    For Each match In matches
        Call variantPush(matchStr, match.value)
        matchExists = True
    Next
   
    If matchExists = False Then
        matchStr = CVErr(xlErrNull)
    End If

    regexMatchMultiple = matchStr
End Function



